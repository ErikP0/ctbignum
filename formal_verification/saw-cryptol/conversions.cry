module conversions where
import big_int

upcast : {out,in} (fin in, fin out, out>=in) => [in] -> [out]
upcast a = ((0:[(out-in)]) # a)
// padd an existing variable with zeros such that it has 
// bit length equal to <out>

// conversion from a number to a big int and vice versa
num_to_bigint : {n,w} (fin n, fin w, n>=1, w>=1) => [n*w] -> Bigint n w  
num_to_bigint num = reverse (split`{n} num)

bigint_to_num : {n,w,out} (fin n, fin w, fin out, n>=1, w>=1, out >= n*w) => Bigint n w -> [out]
bigint_to_num limbs = zero # (join (reverse limbs))
